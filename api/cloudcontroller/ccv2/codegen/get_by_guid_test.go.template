// generated by codegen/gen_get_by_guid.go

package ccv2_test

import (
	"net/http"

	. "code.cloudfoundry.org/cli/api/cloudcontroller/ccv2"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	. "github.com/onsi/gomega/ghttp"
)

var _ = Describe("{{ .EntityName }}", func() {
	var client *Client

	BeforeEach(func() {
		client = NewTestClient()
	})

	Describe("Get{{ .EntityName }}", func() {
		Context("when the {{ .EntityName }} exists", func() {
			BeforeEach(func() {
				response := `{
					"metadata": {
						"guid": "some-{{ .EntityNameDashes }}-guid"
					},
					"entity": {
						"name": "some-{{ .EntityNameDashes }}"
					}
				}`
				server.AppendHandlers(
					CombineHandlers(
						VerifyRequest(http.MethodGet, "/v2/{{ .EntityNameSnake }}s/some-{{ .EntityNameDashes }}-guid"),
						RespondWith(http.StatusOK, response, http.Header{"X-Cf-Warnings": {"warning-1, warning-2"}}),
					))
			})

			It("returns the {{ .EntityNameSnake }} and all warnings", func() {
				{{ .EntityNameVar }}, warnings, err := client.Get{{ .EntityName }}("some-{{ .EntityNameDashes }}-guid")

				Expect(err).ToNot(HaveOccurred())
				Expect({{ .EntityNameVar }}).To(Equal(
					{{ .EntityName }}{
						GUID: "some-{{ .EntityNameDashes }}-guid",
						Name: "some-{{ .EntityNameDashes }}",
					},
				))
				Expect(warnings).To(ConsistOf("warning-1", "warning-2"))
			})
		})

		Context("when an error is encountered", func() {
			BeforeEach(func() {
				response := `{
					"code": 10001,
					"description": "Some Error",
					"error_code": "CF-SomeError"
				}`
				server.AppendHandlers(
					CombineHandlers(
						VerifyRequest(http.MethodGet, "/v2/{{ .EntityNameSnake }}s/some-{{ .EntityNameSnake }}-guid"),
						RespondWith(http.StatusTeapot, response, http.Header{"X-Cf-Warnings": {"warning-1, warning-2"}}),
					))
			})

			It("returns an error and all warnings", func() {
				_, warnings, err := client.Get{{ .EntityName }}("some-{{ .EntityNameSnake }}-guid")

				Expect(err).To(MatchError(UnexpectedResponseError{
					ResponseCode: http.StatusTeapot,
					CCErrorResponse: CCErrorResponse{
						Code:        10001,
						Description: "Some Error",
						ErrorCode:   "CF-SomeError",
					},
				}))
				Expect(warnings).To(ConsistOf("warning-1", "warning-2"))
			})
		})
	})
})
